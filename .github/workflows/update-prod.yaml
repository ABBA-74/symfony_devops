name: update prod
on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  test:
    name: test
    runs-on: ubuntu-24.04
    steps:
      - name: check php version
        run: php -v

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
        
      - name: Setup PHP with Xdebug
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          coverage: xdebug

      - name: check php version
        run: php -v

      - name: Install dependencies with composer
        run: composer update --no-ansi --no-interaction --no-progress
        
      - name: launch tests
        run: php bin/phpunit

      - name: Run tests with phpunit/phpunit
        run: vendor/bin/phpunit --coverage-clover=coverage.xml
        
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  docker-image:
    name: build docker image > docker hub
    runs-on: ubuntu-24.04
    needs: test
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: build docker image
        run: docker build -f Dockerfile-prod -t ${{ secrets.DOCKERHUB_TAG }} .

      - name: connect DockerHub
        run: echo ${{ secrets.DOCKERHUB_PASS }} | docker login -u ${{ secrets.DOCKERHUB_USER }} --password-stdin

      - name: push docker image
        run: docker push ${{ secrets.DOCKERHUB_TAG }}

  vps:
    name: update vps
    runs-on: ubuntu-24.04
    needs: docker-image
    steps:
      - name: install sshpass
        run: sudo apt-get update && sudo apt-get install sshpass

      - name: update docker image in VPS
        run: |
          sshpass -p ${{ secrets.VPS_PASS }} ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOSTNAME }} << EOF
          echo "Connexion reussie au VPS !!!"
          cd symfo-cicd/
          docker compose pull
          docker compose --env-file .env.prod up -d
          docker image prune -f
          echo "Mise à jour effectué avec succès le : `date`" >> log-update-app.txt
          exit
          EOF